// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract Verifier {

    /**
     * @notice EZKL P value
     * @dev In order to prevent the verifier from accepting two version of the same pubInput, n and the quantity (n + P),  where n + P <= 2^256, we require that all instances are stricly less than P.
     * @dev The reason for this is that the assmebly code of the verifier performs all arithmetic operations modulo P and as a consequence can't distinguish between n and n + P values.
     */

    uint256 constant SIZE_LIMIT = 21888242871839275222246405745257275088696311157297823662689037894645226208583; 

    function verify(
        uint256[7] calldata instances,
        bytes calldata proof
    ) public view returns (bool) {
        bool success = true;
        bytes32[1009] memory transcript;
        for (uint i = 0; i < instances.length; i++) {
            require(instances[i] < SIZE_LIMIT);
        }
        assembly {                    let f_p := 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47                    let f_q := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001                    function validate_ec_point(x, y) -> valid {                        {                            let x_lt_p := lt(x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let y_lt_p := lt(y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            valid := and(x_lt_p, y_lt_p)                        }                        {                            let y_square := mulmod(y, y, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_square := mulmod(x, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube := mulmod(x_square, x, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let x_cube_plus_3 := addmod(x_cube, 3, 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)                            let is_affine := eq(x_cube_plus_3, y_square)                            valid := and(valid, is_affine)                        }                    }                    mstore(0xa0, mod(calldataload(0x4), f_q))mstore(0xc0, mod(calldataload(0x24), f_q))mstore(0xe0, mod(calldataload(0x44), f_q))mstore(0x100, mod(calldataload(0x64), f_q))mstore(0x120, mod(calldataload(0x84), f_q))mstore(0x140, mod(calldataload(0xa4), f_q))mstore(0x160, mod(calldataload(0xc4), f_q))mstore(0x80, 19648052309453569096563953843349486184120363498926536861278513940264718417250)        {            let x := calldataload(0x124)            mstore(0x180, x)            let y := calldataload(0x144)            mstore(0x1a0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x164)            mstore(0x1c0, x)            let y := calldataload(0x184)            mstore(0x1e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x1a4)            mstore(0x200, x)            let y := calldataload(0x1c4)            mstore(0x220, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x240, keccak256(0x80, 448)){            let hash := mload(0x240)            mstore(0x260, mod(hash, f_q))            mstore(0x280, hash)        }        {            let x := calldataload(0x1e4)            mstore(0x2a0, x)            let y := calldataload(0x204)            mstore(0x2c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x224)            mstore(0x2e0, x)            let y := calldataload(0x244)            mstore(0x300, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x264)            mstore(0x320, x)            let y := calldataload(0x284)            mstore(0x340, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x2a4)            mstore(0x360, x)            let y := calldataload(0x2c4)            mstore(0x380, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x2e4)            mstore(0x3a0, x)            let y := calldataload(0x304)            mstore(0x3c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x324)            mstore(0x3e0, x)            let y := calldataload(0x344)            mstore(0x400, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x420, keccak256(0x280, 416)){            let hash := mload(0x420)            mstore(0x440, mod(hash, f_q))            mstore(0x460, hash)        }mstore8(0x480, 1)mstore(0x480, keccak256(0x460, 33)){            let hash := mload(0x480)            mstore(0x4a0, mod(hash, f_q))            mstore(0x4c0, hash)        }        {            let x := calldataload(0x364)            mstore(0x4e0, x)            let y := calldataload(0x384)            mstore(0x500, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x3a4)            mstore(0x520, x)            let y := calldataload(0x3c4)            mstore(0x540, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x3e4)            mstore(0x560, x)            let y := calldataload(0x404)            mstore(0x580, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x424)            mstore(0x5a0, x)            let y := calldataload(0x444)            mstore(0x5c0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x464)            mstore(0x5e0, x)            let y := calldataload(0x484)            mstore(0x600, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x4a4)            mstore(0x620, x)            let y := calldataload(0x4c4)            mstore(0x640, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x660, keccak256(0x4c0, 416)){            let hash := mload(0x660)            mstore(0x680, mod(hash, f_q))            mstore(0x6a0, hash)        }        {            let x := calldataload(0x4e4)            mstore(0x6c0, x)            let y := calldataload(0x504)            mstore(0x6e0, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x524)            mstore(0x700, x)            let y := calldataload(0x544)            mstore(0x720, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x564)            mstore(0x740, x)            let y := calldataload(0x584)            mstore(0x760, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0x5a4)            mstore(0x780, x)            let y := calldataload(0x5c4)            mstore(0x7a0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0x7c0, keccak256(0x6a0, 288)){            let hash := mload(0x7c0)            mstore(0x7e0, mod(hash, f_q))            mstore(0x800, hash)        }mstore(0x820, mod(calldataload(0x5e4), f_q))mstore(0x840, mod(calldataload(0x604), f_q))mstore(0x860, mod(calldataload(0x624), f_q))mstore(0x880, mod(calldataload(0x644), f_q))mstore(0x8a0, mod(calldataload(0x664), f_q))mstore(0x8c0, mod(calldataload(0x684), f_q))mstore(0x8e0, mod(calldataload(0x6a4), f_q))mstore(0x900, mod(calldataload(0x6c4), f_q))mstore(0x920, mod(calldataload(0x6e4), f_q))mstore(0x940, mod(calldataload(0x704), f_q))mstore(0x960, mod(calldataload(0x724), f_q))mstore(0x980, mod(calldataload(0x744), f_q))mstore(0x9a0, mod(calldataload(0x764), f_q))mstore(0x9c0, mod(calldataload(0x784), f_q))mstore(0x9e0, mod(calldataload(0x7a4), f_q))mstore(0xa00, mod(calldataload(0x7c4), f_q))mstore(0xa20, mod(calldataload(0x7e4), f_q))mstore(0xa40, mod(calldataload(0x804), f_q))mstore(0xa60, mod(calldataload(0x824), f_q))mstore(0xa80, mod(calldataload(0x844), f_q))mstore(0xaa0, mod(calldataload(0x864), f_q))mstore(0xac0, mod(calldataload(0x884), f_q))mstore(0xae0, mod(calldataload(0x8a4), f_q))mstore(0xb00, mod(calldataload(0x8c4), f_q))mstore(0xb20, mod(calldataload(0x8e4), f_q))mstore(0xb40, mod(calldataload(0x904), f_q))mstore(0xb60, mod(calldataload(0x924), f_q))mstore(0xb80, mod(calldataload(0x944), f_q))mstore(0xba0, mod(calldataload(0x964), f_q))mstore(0xbc0, mod(calldataload(0x984), f_q))mstore(0xbe0, mod(calldataload(0x9a4), f_q))mstore(0xc00, mod(calldataload(0x9c4), f_q))mstore(0xc20, mod(calldataload(0x9e4), f_q))mstore(0xc40, mod(calldataload(0xa04), f_q))mstore(0xc60, mod(calldataload(0xa24), f_q))mstore(0xc80, mod(calldataload(0xa44), f_q))mstore(0xca0, mod(calldataload(0xa64), f_q))mstore(0xcc0, mod(calldataload(0xa84), f_q))mstore(0xce0, mod(calldataload(0xaa4), f_q))mstore(0xd00, mod(calldataload(0xac4), f_q))mstore(0xd20, mod(calldataload(0xae4), f_q))mstore(0xd40, mod(calldataload(0xb04), f_q))mstore(0xd60, mod(calldataload(0xb24), f_q))mstore(0xd80, keccak256(0x800, 1408)){            let hash := mload(0xd80)            mstore(0xda0, mod(hash, f_q))            mstore(0xdc0, hash)        }        {            let x := calldataload(0xb44)            mstore(0xde0, x)            let y := calldataload(0xb64)            mstore(0xe00, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xb84)            mstore(0xe20, x)            let y := calldataload(0xba4)            mstore(0xe40, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xbc4)            mstore(0xe60, x)            let y := calldataload(0xbe4)            mstore(0xe80, y)            success := and(validate_ec_point(x, y), success)        }        {            let x := calldataload(0xc04)            mstore(0xea0, x)            let y := calldataload(0xc24)            mstore(0xec0, y)            success := and(validate_ec_point(x, y), success)        }mstore(0xee0, keccak256(0xdc0, 288)){            let hash := mload(0xee0)            mstore(0xf00, mod(hash, f_q))            mstore(0xf20, hash)        }mstore(0xf40, mulmod(mload(0x7e0), mload(0x7e0), f_q))mstore(0xf60, mulmod(mload(0xf40), mload(0xf40), f_q))mstore(0xf80, mulmod(mload(0xf60), mload(0xf60), f_q))mstore(0xfa0, mulmod(mload(0xf80), mload(0xf80), f_q))mstore(0xfc0, mulmod(mload(0xfa0), mload(0xfa0), f_q))mstore(0xfe0, mulmod(mload(0xfc0), mload(0xfc0), f_q))mstore(0x1000, mulmod(mload(0xfe0), mload(0xfe0), f_q))mstore(0x1020, mulmod(mload(0x1000), mload(0x1000), f_q))mstore(0x1040, mulmod(mload(0x1020), mload(0x1020), f_q))mstore(0x1060, mulmod(mload(0x1040), mload(0x1040), f_q))mstore(0x1080, addmod(mload(0x1060), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x10a0, mulmod(mload(0x1080), 21866867634659744680037180739646672280844703888306253060159436409049855557633, f_q))mstore(0x10c0, mulmod(mload(0x10a0), 9936069627611189518829255670237324269287146421271524553312532036927871056678, f_q))mstore(0x10e0, addmod(mload(0x7e0), 11952173244228085703417150075019950819261217979144509790385672149647937438939, f_q))mstore(0x1100, mulmod(mload(0x10a0), 1680739780407307830605919050682431078078760076686599579086116998224280619988, f_q))mstore(0x1120, addmod(mload(0x7e0), 20207503091431967391640486694574844010469604323729434764612087188351527875629, f_q))mstore(0x1140, mulmod(mload(0x10a0), 14158528901797138466244491986759313854666262535363044392173788062030301470987, f_q))mstore(0x1160, addmod(mload(0x7e0), 7729713970042136756001913758497961233882101865052989951524416124545507024630, f_q))mstore(0x1180, mulmod(mload(0x10a0), 15699029810934084314820646074566828280617789951162923449200398535581206172418, f_q))mstore(0x11a0, addmod(mload(0x7e0), 6189213060905190907425759670690446807930574449253110894497805650994602323199, f_q))mstore(0x11c0, mulmod(mload(0x10a0), 4260969412351770314333984243767775737437927068151180798236715529158398853173, f_q))mstore(0x11e0, addmod(mload(0x7e0), 17627273459487504907912421501489499351110437332264853545461488657417409642444, f_q))mstore(0x1200, mulmod(mload(0x10a0), 4925592601992654644734291590386747644864797672605745962807370354577123815907, f_q))mstore(0x1220, addmod(mload(0x7e0), 16962650269846620577512114154870527443683566727810288380890833831998684679710, f_q))mstore(0x1240, mulmod(mload(0x10a0), 1, f_q))mstore(0x1260, addmod(mload(0x7e0), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x1280, mulmod(mload(0x10a0), 19380560087801265747114831706136320509424814679569278834391540198888293317501, f_q))mstore(0x12a0, addmod(mload(0x7e0), 2507682784038009475131574039120954579123549720846755509306663987687515178116, f_q))mstore(0x12c0, mulmod(mload(0x10a0), 6252951856119339508807713076978770803512896272623217303779254502899773638908, f_q))mstore(0x12e0, addmod(mload(0x7e0), 15635291015719935713438692668278504285035468127792817039918949683676034856709, f_q))mstore(0x1300, mulmod(mload(0x10a0), 15554008185779528788857340196607833777388478343360168149406749724843247080062, f_q))mstore(0x1320, addmod(mload(0x7e0), 6334234686059746433389065548649441311159886057055866194291454461732561415555, f_q)){            let prod := mload(0x10e0)                prod := mulmod(mload(0x1120), prod, f_q)                mstore(0x1340, prod)                            prod := mulmod(mload(0x1160), prod, f_q)                mstore(0x1360, prod)                            prod := mulmod(mload(0x11a0), prod, f_q)                mstore(0x1380, prod)                            prod := mulmod(mload(0x11e0), prod, f_q)                mstore(0x13a0, prod)                            prod := mulmod(mload(0x1220), prod, f_q)                mstore(0x13c0, prod)                            prod := mulmod(mload(0x1260), prod, f_q)                mstore(0x13e0, prod)                            prod := mulmod(mload(0x12a0), prod, f_q)                mstore(0x1400, prod)                            prod := mulmod(mload(0x12e0), prod, f_q)                mstore(0x1420, prod)                            prod := mulmod(mload(0x1320), prod, f_q)                mstore(0x1440, prod)                            prod := mulmod(mload(0x1080), prod, f_q)                mstore(0x1460, prod)                    }mstore(0x14a0, 32)mstore(0x14c0, 32)mstore(0x14e0, 32)mstore(0x1500, mload(0x1460))mstore(0x1520, 21888242871839275222246405745257275088548364400416034343698204186575808495615)mstore(0x1540, 21888242871839275222246405745257275088548364400416034343698204186575808495617)success := and(eq(staticcall(gas(), 0x5, 0x14a0, 0xc0, 0x1480, 0x20), 1), success){                        let inv := mload(0x1480)            let v                            v := mload(0x1080)                    mstore(0x1080, mulmod(mload(0x1440), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1320)                    mstore(0x1320, mulmod(mload(0x1420), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x12e0)                    mstore(0x12e0, mulmod(mload(0x1400), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x12a0)                    mstore(0x12a0, mulmod(mload(0x13e0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1260)                    mstore(0x1260, mulmod(mload(0x13c0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1220)                    mstore(0x1220, mulmod(mload(0x13a0), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x11e0)                    mstore(0x11e0, mulmod(mload(0x1380), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x11a0)                    mstore(0x11a0, mulmod(mload(0x1360), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1160)                    mstore(0x1160, mulmod(mload(0x1340), inv, f_q))                    inv := mulmod(v, inv, f_q)                                    v := mload(0x1120)                    mstore(0x1120, mulmod(mload(0x10e0), inv, f_q))                    inv := mulmod(v, inv, f_q)                mstore(0x10e0, inv)        }mstore(0x1560, mulmod(mload(0x10c0), mload(0x10e0), f_q))mstore(0x1580, mulmod(mload(0x1100), mload(0x1120), f_q))mstore(0x15a0, mulmod(mload(0x1140), mload(0x1160), f_q))mstore(0x15c0, mulmod(mload(0x1180), mload(0x11a0), f_q))mstore(0x15e0, mulmod(mload(0x11c0), mload(0x11e0), f_q))mstore(0x1600, mulmod(mload(0x1200), mload(0x1220), f_q))mstore(0x1620, mulmod(mload(0x1240), mload(0x1260), f_q))mstore(0x1640, mulmod(mload(0x1280), mload(0x12a0), f_q))mstore(0x1660, mulmod(mload(0x12c0), mload(0x12e0), f_q))mstore(0x1680, mulmod(mload(0x1300), mload(0x1320), f_q)){            let result := mulmod(mload(0x1620), mload(0xa0), f_q)result := addmod(mulmod(mload(0x1640), mload(0xc0), f_q), result, f_q)result := addmod(mulmod(mload(0x1660), mload(0xe0), f_q), result, f_q)result := addmod(mulmod(mload(0x1680), mload(0x100), f_q), result, f_q)mstore(0x16a0, result)        }{            let result := mulmod(mload(0x1620), mload(0x120), f_q)result := addmod(mulmod(mload(0x1640), mload(0x140), f_q), result, f_q)result := addmod(mulmod(mload(0x1660), mload(0x160), f_q), result, f_q)mstore(0x16c0, result)        }mstore(0x16e0, addmod(1, sub(f_q, mload(0x9a0)), f_q))mstore(0x1700, mulmod(mload(0x16e0), mload(0x9a0), f_q))mstore(0x1720, addmod(2, sub(f_q, mload(0x9a0)), f_q))mstore(0x1740, mulmod(mload(0x1720), mload(0x1700), f_q))mstore(0x1760, mulmod(mload(0x840), mload(0x820), f_q))mstore(0x1780, addmod(mload(0x1760), mload(0x880), f_q))mstore(0x17a0, addmod(mload(0x860), sub(f_q, mload(0x1780)), f_q))mstore(0x17c0, mulmod(mload(0x17a0), mload(0x1740), f_q))mstore(0x17e0, mulmod(mload(0x680), mload(0x17c0), f_q))mstore(0x1800, addmod(2, sub(f_q, mload(0x9c0)), f_q))mstore(0x1820, mulmod(mload(0x1800), mload(0x9c0), f_q))mstore(0x1840, addmod(3, sub(f_q, mload(0x9c0)), f_q))mstore(0x1860, mulmod(mload(0x1840), mload(0x1820), f_q))mstore(0x1880, mulmod(mload(0x880), mload(0x840), f_q))mstore(0x18a0, addmod(mload(0x860), sub(f_q, mload(0x1880)), f_q))mstore(0x18c0, mulmod(mload(0x18a0), mload(0x1860), f_q))mstore(0x18e0, addmod(mload(0x17e0), mload(0x18c0), f_q))mstore(0x1900, mulmod(mload(0x680), mload(0x18e0), f_q))mstore(0x1920, addmod(2, sub(f_q, mload(0xa00)), f_q))mstore(0x1940, mulmod(mload(0x1920), mload(0xa00), f_q))mstore(0x1960, addmod(mload(0x860), sub(f_q, mload(0x840)), f_q))mstore(0x1980, mulmod(mload(0x1960), mload(0x1940), f_q))mstore(0x19a0, addmod(mload(0x1900), mload(0x1980), f_q))mstore(0x19c0, mulmod(mload(0x680), mload(0x19a0), f_q))mstore(0x19e0, mulmod(mload(0x1720), mload(0x9a0), f_q))mstore(0x1a00, addmod(3, sub(f_q, mload(0x9a0)), f_q))mstore(0x1a20, mulmod(mload(0x1a00), mload(0x19e0), f_q))mstore(0x1a40, addmod(mload(0x820), mload(0x840), f_q))mstore(0x1a60, addmod(mload(0x860), sub(f_q, mload(0x1a40)), f_q))mstore(0x1a80, mulmod(mload(0x1a60), mload(0x1a20), f_q))mstore(0x1aa0, addmod(mload(0x19c0), mload(0x1a80), f_q))mstore(0x1ac0, mulmod(mload(0x680), mload(0x1aa0), f_q))mstore(0x1ae0, addmod(2, sub(f_q, mload(0x9e0)), f_q))mstore(0x1b00, mulmod(mload(0x1ae0), mload(0x9e0), f_q))mstore(0x1b20, addmod(3, sub(f_q, mload(0x9e0)), f_q))mstore(0x1b40, mulmod(mload(0x1b20), mload(0x1b00), f_q))mstore(0x1b60, addmod(mload(0x860), sub(f_q, mload(0x1760)), f_q))mstore(0x1b80, mulmod(mload(0x1b60), mload(0x1b40), f_q))mstore(0x1ba0, addmod(mload(0x1ac0), mload(0x1b80), f_q))mstore(0x1bc0, mulmod(mload(0x680), mload(0x1ba0), f_q))mstore(0x1be0, mulmod(mload(0x1a00), mload(0x1700), f_q))mstore(0x1c00, addmod(mload(0x820), sub(f_q, mload(0x840)), f_q))mstore(0x1c20, addmod(mload(0x860), sub(f_q, mload(0x1c00)), f_q))mstore(0x1c40, mulmod(mload(0x1c20), mload(0x1be0), f_q))mstore(0x1c60, addmod(mload(0x1bc0), mload(0x1c40), f_q))mstore(0x1c80, mulmod(mload(0x680), mload(0x1c60), f_q))mstore(0x1ca0, addmod(1, sub(f_q, mload(0x9c0)), f_q))mstore(0x1cc0, mulmod(mload(0x1ca0), mload(0x9c0), f_q))mstore(0x1ce0, mulmod(mload(0x1840), mload(0x1cc0), f_q))mstore(0x1d00, addmod(mload(0x840), mload(0x880), f_q))mstore(0x1d20, addmod(mload(0x860), sub(f_q, mload(0x1d00)), f_q))mstore(0x1d40, mulmod(mload(0x1d20), mload(0x1ce0), f_q))mstore(0x1d60, addmod(mload(0x1c80), mload(0x1d40), f_q))mstore(0x1d80, mulmod(mload(0x680), mload(0x1d60), f_q))mstore(0x1da0, mulmod(mload(0x1800), mload(0x1cc0), f_q))mstore(0x1dc0, addmod(mload(0x860), sub(f_q, sub(f_q, mload(0x840))), f_q))mstore(0x1de0, mulmod(mload(0x1dc0), mload(0x1da0), f_q))mstore(0x1e00, addmod(mload(0x1d80), mload(0x1de0), f_q))mstore(0x1e20, mulmod(mload(0x680), mload(0x1e00), f_q))mstore(0x1e40, addmod(1, sub(f_q, mload(0x9e0)), f_q))mstore(0x1e60, mulmod(mload(0x1e40), mload(0x9e0), f_q))mstore(0x1e80, mulmod(mload(0x1b20), mload(0x1e60), f_q))mstore(0x1ea0, addmod(mload(0x840), sub(f_q, mload(0x860)), f_q))mstore(0x1ec0, mulmod(mload(0x1ea0), mload(0x1e80), f_q))mstore(0x1ee0, addmod(mload(0x1e20), mload(0x1ec0), f_q))mstore(0x1f00, mulmod(mload(0x680), mload(0x1ee0), f_q))mstore(0x1f20, mulmod(mload(0x1ae0), mload(0x1e60), f_q))mstore(0x1f40, mulmod(mload(0x840), mload(0x1f20), f_q))mstore(0x1f60, addmod(mload(0x1f00), mload(0x1f40), f_q))mstore(0x1f80, mulmod(mload(0x680), mload(0x1f60), f_q))mstore(0x1fa0, addmod(1, sub(f_q, mload(0xa00)), f_q))mstore(0x1fc0, mulmod(mload(0x1fa0), mload(0xa00), f_q))mstore(0x1fe0, addmod(mload(0x840), 21888242871839275222246405745257275088548364400416034343698204186575808495616, f_q))mstore(0x2000, mulmod(mload(0x1fe0), mload(0x840), f_q))mstore(0x2020, mulmod(mload(0x2000), mload(0x1fc0), f_q))mstore(0x2040, addmod(mload(0x1f80), mload(0x2020), f_q))mstore(0x2060, mulmod(mload(0x680), mload(0x2040), f_q))mstore(0x2080, addmod(1, sub(f_q, mload(0xb00)), f_q))mstore(0x20a0, mulmod(mload(0x2080), mload(0x1620), f_q))mstore(0x20c0, addmod(mload(0x2060), mload(0x20a0), f_q))mstore(0x20e0, mulmod(mload(0x680), mload(0x20c0), f_q))mstore(0x2100, mulmod(mload(0xb60), mload(0xb60), f_q))mstore(0x2120, addmod(mload(0x2100), sub(f_q, mload(0xb60)), f_q))mstore(0x2140, mulmod(mload(0x2120), mload(0x1560), f_q))mstore(0x2160, addmod(mload(0x20e0), mload(0x2140), f_q))mstore(0x2180, mulmod(mload(0x680), mload(0x2160), f_q))mstore(0x21a0, addmod(mload(0xb60), sub(f_q, mload(0xb40)), f_q))mstore(0x21c0, mulmod(mload(0x21a0), mload(0x1620), f_q))mstore(0x21e0, addmod(mload(0x2180), mload(0x21c0), f_q))mstore(0x2200, mulmod(mload(0x680), mload(0x21e0), f_q))mstore(0x2220, addmod(1, sub(f_q, mload(0x1560)), f_q))mstore(0x2240, addmod(mload(0x1580), mload(0x15a0), f_q))mstore(0x2260, addmod(mload(0x2240), mload(0x15c0), f_q))mstore(0x2280, addmod(mload(0x2260), mload(0x15e0), f_q))mstore(0x22a0, addmod(mload(0x2280), mload(0x1600), f_q))mstore(0x22c0, addmod(mload(0x2220), sub(f_q, mload(0x22a0)), f_q))mstore(0x22e0, mulmod(mload(0xa40), mload(0x440), f_q))mstore(0x2300, addmod(mload(0x820), mload(0x22e0), f_q))mstore(0x2320, addmod(mload(0x2300), mload(0x4a0), f_q))mstore(0x2340, mulmod(mload(0xa60), mload(0x440), f_q))mstore(0x2360, addmod(mload(0x840), mload(0x2340), f_q))mstore(0x2380, addmod(mload(0x2360), mload(0x4a0), f_q))mstore(0x23a0, mulmod(mload(0x2380), mload(0x2320), f_q))mstore(0x23c0, mulmod(mload(0xa80), mload(0x440), f_q))mstore(0x23e0, addmod(mload(0x860), mload(0x23c0), f_q))mstore(0x2400, addmod(mload(0x23e0), mload(0x4a0), f_q))mstore(0x2420, mulmod(mload(0x2400), mload(0x23a0), f_q))mstore(0x2440, mulmod(mload(0x2420), mload(0xb20), f_q))mstore(0x2460, mulmod(1, mload(0x440), f_q))mstore(0x2480, mulmod(mload(0x7e0), mload(0x2460), f_q))mstore(0x24a0, addmod(mload(0x820), mload(0x2480), f_q))mstore(0x24c0, addmod(mload(0x24a0), mload(0x4a0), f_q))mstore(0x24e0, mulmod(4131629893567559867359510883348571134090853742863529169391034518566172092834, mload(0x440), f_q))mstore(0x2500, mulmod(mload(0x7e0), mload(0x24e0), f_q))mstore(0x2520, addmod(mload(0x840), mload(0x2500), f_q))mstore(0x2540, addmod(mload(0x2520), mload(0x4a0), f_q))mstore(0x2560, mulmod(mload(0x2540), mload(0x24c0), f_q))mstore(0x2580, mulmod(8910878055287538404433155982483128285667088683464058436815641868457422632747, mload(0x440), f_q))mstore(0x25a0, mulmod(mload(0x7e0), mload(0x2580), f_q))mstore(0x25c0, addmod(mload(0x860), mload(0x25a0), f_q))mstore(0x25e0, addmod(mload(0x25c0), mload(0x4a0), f_q))mstore(0x2600, mulmod(mload(0x25e0), mload(0x2560), f_q))mstore(0x2620, mulmod(mload(0x2600), mload(0xb00), f_q))mstore(0x2640, addmod(mload(0x2440), sub(f_q, mload(0x2620)), f_q))mstore(0x2660, mulmod(mload(0x2640), mload(0x22c0), f_q))mstore(0x2680, addmod(mload(0x2200), mload(0x2660), f_q))mstore(0x26a0, mulmod(mload(0x680), mload(0x2680), f_q))mstore(0x26c0, mulmod(mload(0xaa0), mload(0x440), f_q))mstore(0x26e0, addmod(mload(0x16a0), mload(0x26c0), f_q))mstore(0x2700, addmod(mload(0x26e0), mload(0x4a0), f_q))mstore(0x2720, mulmod(mload(0xac0), mload(0x440), f_q))mstore(0x2740, addmod(mload(0x16c0), mload(0x2720), f_q))mstore(0x2760, addmod(mload(0x2740), mload(0x4a0), f_q))mstore(0x2780, mulmod(mload(0x2760), mload(0x2700), f_q))mstore(0x27a0, mulmod(mload(0xae0), mload(0x440), f_q))mstore(0x27c0, addmod(mload(0x8a0), mload(0x27a0), f_q))mstore(0x27e0, addmod(mload(0x27c0), mload(0x4a0), f_q))mstore(0x2800, mulmod(mload(0x27e0), mload(0x2780), f_q))mstore(0x2820, mulmod(mload(0x2800), mload(0xb80), f_q))mstore(0x2840, mulmod(11166246659983828508719468090013646171463329086121580628794302409516816350802, mload(0x440), f_q))mstore(0x2860, mulmod(mload(0x7e0), mload(0x2840), f_q))mstore(0x2880, addmod(mload(0x16a0), mload(0x2860), f_q))mstore(0x28a0, addmod(mload(0x2880), mload(0x4a0), f_q))mstore(0x28c0, mulmod(284840088355319032285349970403338060113257071685626700086398481893096618818, mload(0x440), f_q))mstore(0x28e0, mulmod(mload(0x7e0), mload(0x28c0), f_q))mstore(0x2900, addmod(mload(0x16c0), mload(0x28e0), f_q))mstore(0x2920, addmod(mload(0x2900), mload(0x4a0), f_q))mstore(0x2940, mulmod(mload(0x2920), mload(0x28a0), f_q))mstore(0x2960, mulmod(21134065618345176623193549882539580312263652408302468683943992798037078993309, mload(0x440), f_q))mstore(0x2980, mulmod(mload(0x7e0), mload(0x2960), f_q))mstore(0x29a0, addmod(mload(0x8a0), mload(0x2980), f_q))mstore(0x29c0, addmod(mload(0x29a0), mload(0x4a0), f_q))mstore(0x29e0, mulmod(mload(0x29c0), mload(0x2940), f_q))mstore(0x2a00, mulmod(mload(0x29e0), mload(0xb60), f_q))mstore(0x2a20, addmod(mload(0x2820), sub(f_q, mload(0x2a00)), f_q))mstore(0x2a40, mulmod(mload(0x2a20), mload(0x22c0), f_q))mstore(0x2a60, addmod(mload(0x26a0), mload(0x2a40), f_q))mstore(0x2a80, mulmod(mload(0x680), mload(0x2a60), f_q))mstore(0x2aa0, addmod(1, sub(f_q, mload(0xba0)), f_q))mstore(0x2ac0, mulmod(mload(0x2aa0), mload(0x1620), f_q))mstore(0x2ae0, addmod(mload(0x2a80), mload(0x2ac0), f_q))mstore(0x2b00, mulmod(mload(0x680), mload(0x2ae0), f_q))mstore(0x2b20, mulmod(mload(0xba0), mload(0xba0), f_q))mstore(0x2b40, addmod(mload(0x2b20), sub(f_q, mload(0xba0)), f_q))mstore(0x2b60, mulmod(mload(0x2b40), mload(0x1560), f_q))mstore(0x2b80, addmod(mload(0x2b00), mload(0x2b60), f_q))mstore(0x2ba0, mulmod(mload(0x680), mload(0x2b80), f_q))mstore(0x2bc0, addmod(mload(0xbe0), mload(0x440), f_q))mstore(0x2be0, mulmod(mload(0x2bc0), mload(0xbc0), f_q))mstore(0x2c00, addmod(mload(0xc20), mload(0x4a0), f_q))mstore(0x2c20, mulmod(mload(0x2c00), mload(0x2be0), f_q))mstore(0x2c40, mulmod(mload(0x820), mload(0x940), f_q))mstore(0x2c60, addmod(1, sub(f_q, mload(0x940)), f_q))mstore(0x2c80, mulmod(mload(0x2c60), 0, f_q))mstore(0x2ca0, addmod(mload(0x2c40), mload(0x2c80), f_q))mstore(0x2cc0, mulmod(mload(0x260), mload(0x2ca0), f_q))mstore(0x2ce0, mulmod(mload(0x840), mload(0x940), f_q))mstore(0x2d00, addmod(mload(0x2ce0), mload(0x2c80), f_q))mstore(0x2d20, addmod(mload(0x2cc0), mload(0x2d00), f_q))mstore(0x2d40, addmod(mload(0x2d20), mload(0x440), f_q))mstore(0x2d60, mulmod(mload(0x2d40), mload(0xba0), f_q))mstore(0x2d80, mulmod(mload(0x260), mload(0x8c0), f_q))mstore(0x2da0, addmod(mload(0x2d80), mload(0x8e0), f_q))mstore(0x2dc0, addmod(mload(0x2da0), mload(0x4a0), f_q))mstore(0x2de0, mulmod(mload(0x2dc0), mload(0x2d60), f_q))mstore(0x2e00, addmod(mload(0x2c20), sub(f_q, mload(0x2de0)), f_q))mstore(0x2e20, mulmod(mload(0x2e00), mload(0x22c0), f_q))mstore(0x2e40, addmod(mload(0x2ba0), mload(0x2e20), f_q))mstore(0x2e60, mulmod(mload(0x680), mload(0x2e40), f_q))mstore(0x2e80, addmod(mload(0xbe0), sub(f_q, mload(0xc20)), f_q))mstore(0x2ea0, mulmod(mload(0x2e80), mload(0x1620), f_q))mstore(0x2ec0, addmod(mload(0x2e60), mload(0x2ea0), f_q))mstore(0x2ee0, mulmod(mload(0x680), mload(0x2ec0), f_q))mstore(0x2f00, mulmod(mload(0x2e80), mload(0x22c0), f_q))mstore(0x2f20, addmod(mload(0xbe0), sub(f_q, mload(0xc00)), f_q))mstore(0x2f40, mulmod(mload(0x2f20), mload(0x2f00), f_q))mstore(0x2f60, addmod(mload(0x2ee0), mload(0x2f40), f_q))mstore(0x2f80, mulmod(mload(0x680), mload(0x2f60), f_q))mstore(0x2fa0, addmod(1, sub(f_q, mload(0xc40)), f_q))mstore(0x2fc0, mulmod(mload(0x2fa0), mload(0x1620), f_q))mstore(0x2fe0, addmod(mload(0x2f80), mload(0x2fc0), f_q))mstore(0x3000, mulmod(mload(0x680), mload(0x2fe0), f_q))mstore(0x3020, mulmod(mload(0xc40), mload(0xc40), f_q))mstore(0x3040, addmod(mload(0x3020), sub(f_q, mload(0xc40)), f_q))mstore(0x3060, mulmod(mload(0x3040), mload(0x1560), f_q))mstore(0x3080, addmod(mload(0x3000), mload(0x3060), f_q))mstore(0x30a0, mulmod(mload(0x680), mload(0x3080), f_q))mstore(0x30c0, addmod(mload(0xc80), mload(0x440), f_q))mstore(0x30e0, mulmod(mload(0x30c0), mload(0xc60), f_q))mstore(0x3100, addmod(mload(0xcc0), mload(0x4a0), f_q))mstore(0x3120, mulmod(mload(0x3100), mload(0x30e0), f_q))mstore(0x3140, mulmod(mload(0x820), mload(0x960), f_q))mstore(0x3160, addmod(1, sub(f_q, mload(0x960)), f_q))mstore(0x3180, mulmod(mload(0x3160), 0, f_q))mstore(0x31a0, addmod(mload(0x3140), mload(0x3180), f_q))mstore(0x31c0, mulmod(mload(0x260), mload(0x31a0), f_q))mstore(0x31e0, mulmod(mload(0x840), mload(0x960), f_q))mstore(0x3200, mulmod(mload(0x3160), 170141183460469231731687303715884105727, f_q))mstore(0x3220, addmod(mload(0x31e0), mload(0x3200), f_q))mstore(0x3240, addmod(mload(0x31c0), mload(0x3220), f_q))mstore(0x3260, addmod(mload(0x3240), mload(0x440), f_q))mstore(0x3280, mulmod(mload(0x3260), mload(0xc40), f_q))mstore(0x32a0, addmod(mload(0x2d80), mload(0x900), f_q))mstore(0x32c0, addmod(mload(0x32a0), mload(0x4a0), f_q))mstore(0x32e0, mulmod(mload(0x32c0), mload(0x3280), f_q))mstore(0x3300, addmod(mload(0x3120), sub(f_q, mload(0x32e0)), f_q))mstore(0x3320, mulmod(mload(0x3300), mload(0x22c0), f_q))mstore(0x3340, addmod(mload(0x30a0), mload(0x3320), f_q))mstore(0x3360, mulmod(mload(0x680), mload(0x3340), f_q))mstore(0x3380, addmod(mload(0xc80), sub(f_q, mload(0xcc0)), f_q))mstore(0x33a0, mulmod(mload(0x3380), mload(0x1620), f_q))mstore(0x33c0, addmod(mload(0x3360), mload(0x33a0), f_q))mstore(0x33e0, mulmod(mload(0x680), mload(0x33c0), f_q))mstore(0x3400, mulmod(mload(0x3380), mload(0x22c0), f_q))mstore(0x3420, addmod(mload(0xc80), sub(f_q, mload(0xca0)), f_q))mstore(0x3440, mulmod(mload(0x3420), mload(0x3400), f_q))mstore(0x3460, addmod(mload(0x33e0), mload(0x3440), f_q))mstore(0x3480, mulmod(mload(0x680), mload(0x3460), f_q))mstore(0x34a0, addmod(1, sub(f_q, mload(0xce0)), f_q))mstore(0x34c0, mulmod(mload(0x34a0), mload(0x1620), f_q))mstore(0x34e0, addmod(mload(0x3480), mload(0x34c0), f_q))mstore(0x3500, mulmod(mload(0x680), mload(0x34e0), f_q))mstore(0x3520, mulmod(mload(0xce0), mload(0xce0), f_q))mstore(0x3540, addmod(mload(0x3520), sub(f_q, mload(0xce0)), f_q))mstore(0x3560, mulmod(mload(0x3540), mload(0x1560), f_q))mstore(0x3580, addmod(mload(0x3500), mload(0x3560), f_q))mstore(0x35a0, mulmod(mload(0x680), mload(0x3580), f_q))mstore(0x35c0, addmod(mload(0xd20), mload(0x440), f_q))mstore(0x35e0, mulmod(mload(0x35c0), mload(0xd00), f_q))mstore(0x3600, addmod(mload(0xd60), mload(0x4a0), f_q))mstore(0x3620, mulmod(mload(0x3600), mload(0x35e0), f_q))mstore(0x3640, mulmod(mload(0x820), mload(0x980), f_q))mstore(0x3660, addmod(1, sub(f_q, mload(0x980)), f_q))mstore(0x3680, mulmod(mload(0x3660), 0, f_q))mstore(0x36a0, addmod(mload(0x3640), mload(0x3680), f_q))mstore(0x36c0, mulmod(mload(0x260), mload(0x36a0), f_q))mstore(0x36e0, mulmod(mload(0x840), mload(0x980), f_q))mstore(0x3700, mulmod(mload(0x3660), 32, f_q))mstore(0x3720, addmod(mload(0x36e0), mload(0x3700), f_q))mstore(0x3740, addmod(mload(0x36c0), mload(0x3720), f_q))mstore(0x3760, addmod(mload(0x3740), mload(0x440), f_q))mstore(0x3780, mulmod(mload(0x3760), mload(0xce0), f_q))mstore(0x37a0, addmod(mload(0x2d80), mload(0x920), f_q))mstore(0x37c0, addmod(mload(0x37a0), mload(0x4a0), f_q))mstore(0x37e0, mulmod(mload(0x37c0), mload(0x3780), f_q))mstore(0x3800, addmod(mload(0x3620), sub(f_q, mload(0x37e0)), f_q))mstore(0x3820, mulmod(mload(0x3800), mload(0x22c0), f_q))mstore(0x3840, addmod(mload(0x35a0), mload(0x3820), f_q))mstore(0x3860, mulmod(mload(0x680), mload(0x3840), f_q))mstore(0x3880, addmod(mload(0xd20), sub(f_q, mload(0xd60)), f_q))mstore(0x38a0, mulmod(mload(0x3880), mload(0x1620), f_q))mstore(0x38c0, addmod(mload(0x3860), mload(0x38a0), f_q))mstore(0x38e0, mulmod(mload(0x680), mload(0x38c0), f_q))mstore(0x3900, mulmod(mload(0x3880), mload(0x22c0), f_q))mstore(0x3920, addmod(mload(0xd20), sub(f_q, mload(0xd40)), f_q))mstore(0x3940, mulmod(mload(0x3920), mload(0x3900), f_q))mstore(0x3960, addmod(mload(0x38e0), mload(0x3940), f_q))mstore(0x3980, mulmod(mload(0x1060), mload(0x1060), f_q))mstore(0x39a0, mulmod(mload(0x3980), mload(0x1060), f_q))mstore(0x39c0, mulmod(mload(0x39a0), mload(0x1060), f_q))mstore(0x39e0, mulmod(1, mload(0x1060), f_q))mstore(0x3a00, mulmod(1, mload(0x3980), f_q))mstore(0x3a20, mulmod(1, mload(0x39a0), f_q))mstore(0x3a40, mulmod(mload(0x3960), mload(0x1080), f_q))mstore(0x3a60, mulmod(mload(0xf00), mload(0xf00), f_q))mstore(0x3a80, mulmod(mload(0x3a60), mload(0xf00), f_q))mstore(0x3aa0, mulmod(mload(0x3a80), mload(0xf00), f_q))mstore(0x3ac0, mulmod(mload(0xda0), mload(0xda0), f_q))mstore(0x3ae0, mulmod(mload(0x3ac0), mload(0xda0), f_q))mstore(0x3b00, mulmod(mload(0x3ae0), mload(0xda0), f_q))mstore(0x3b20, mulmod(mload(0x3b00), mload(0xda0), f_q))mstore(0x3b40, mulmod(mload(0x3b20), mload(0xda0), f_q))mstore(0x3b60, mulmod(mload(0x3b40), mload(0xda0), f_q))mstore(0x3b80, mulmod(mload(0x3b60), mload(0xda0), f_q))mstore(0x3ba0, mulmod(mload(0x3b80), mload(0xda0), f_q))mstore(0x3bc0, mulmod(mload(0x3ba0), mload(0xda0), f_q))mstore(0x3be0, mulmod(mload(0x3bc0), mload(0xda0), f_q))mstore(0x3c00, mulmod(mload(0x3be0), mload(0xda0), f_q))mstore(0x3c20, mulmod(mload(0x3c00), mload(0xda0), f_q))mstore(0x3c40, mulmod(mload(0x3c20), mload(0xda0), f_q))mstore(0x3c60, mulmod(mload(0x3c40), mload(0xda0), f_q))mstore(0x3c80, mulmod(mload(0x3c60), mload(0xda0), f_q))mstore(0x3ca0, mulmod(mload(0x3c80), mload(0xda0), f_q))mstore(0x3cc0, mulmod(mload(0x3ca0), mload(0xda0), f_q))mstore(0x3ce0, mulmod(mload(0x3cc0), mload(0xda0), f_q))mstore(0x3d00, mulmod(mload(0x3ce0), mload(0xda0), f_q))mstore(0x3d20, mulmod(mload(0x3d00), mload(0xda0), f_q))mstore(0x3d40, mulmod(mload(0x3d20), mload(0xda0), f_q))mstore(0x3d60, mulmod(mload(0x3d40), mload(0xda0), f_q))mstore(0x3d80, mulmod(mload(0x3d60), mload(0xda0), f_q))mstore(0x3da0, mulmod(mload(0x3d80), mload(0xda0), f_q))mstore(0x3dc0, mulmod(mload(0x3da0), mload(0xda0), f_q))mstore(0x3de0, mulmod(mload(0x3dc0), mload(0xda0), f_q))mstore(0x3e00, mulmod(mload(0x3de0), mload(0xda0), f_q))mstore(0x3e20, mulmod(mload(0x3e00), mload(0xda0), f_q))mstore(0x3e40, mulmod(mload(0x3e20), mload(0xda0), f_q))mstore(0x3e60, mulmod(mload(0x3e40), mload(0xda0), f_q))mstore(0x3e80, mulmod(mload(0x3e60), mload(0xda0), f_q))mstore(0x3ea0, mulmod(mload(0x3e80), mload(0xda0), f_q))mstore(0x3ec0, mulmod(mload(0x3ea0), mload(0xda0), f_q))mstore(0x3ee0, mulmod(sub(f_q, mload(0x820)), 1, f_q))mstore(0x3f00, mulmod(sub(f_q, mload(0x840)), mload(0xda0), f_q))mstore(0x3f20, mulmod(1, mload(0xda0), f_q))mstore(0x3f40, addmod(mload(0x3ee0), mload(0x3f00), f_q))mstore(0x3f60, mulmod(sub(f_q, mload(0x860)), mload(0x3ac0), f_q))mstore(0x3f80, mulmod(1, mload(0x3ac0), f_q))mstore(0x3fa0, addmod(mload(0x3f40), mload(0x3f60), f_q))mstore(0x3fc0, mulmod(sub(f_q, mload(0xb00)), mload(0x3ae0), f_q))mstore(0x3fe0, mulmod(1, mload(0x3ae0), f_q))mstore(0x4000, addmod(mload(0x3fa0), mload(0x3fc0), f_q))mstore(0x4020, mulmod(sub(f_q, mload(0xb60)), mload(0x3b00), f_q))mstore(0x4040, mulmod(1, mload(0x3b00), f_q))mstore(0x4060, addmod(mload(0x4000), mload(0x4020), f_q))mstore(0x4080, mulmod(sub(f_q, mload(0xba0)), mload(0x3b20), f_q))mstore(0x40a0, mulmod(1, mload(0x3b20), f_q))mstore(0x40c0, addmod(mload(0x4060), mload(0x4080), f_q))mstore(0x40e0, mulmod(sub(f_q, mload(0xbe0)), mload(0x3b40), f_q))mstore(0x4100, mulmod(1, mload(0x3b40), f_q))mstore(0x4120, addmod(mload(0x40c0), mload(0x40e0), f_q))mstore(0x4140, mulmod(sub(f_q, mload(0xc20)), mload(0x3b60), f_q))mstore(0x4160, mulmod(1, mload(0x3b60), f_q))mstore(0x4180, addmod(mload(0x4120), mload(0x4140), f_q))mstore(0x41a0, mulmod(sub(f_q, mload(0xc40)), mload(0x3b80), f_q))mstore(0x41c0, mulmod(1, mload(0x3b80), f_q))mstore(0x41e0, addmod(mload(0x4180), mload(0x41a0), f_q))mstore(0x4200, mulmod(sub(f_q, mload(0xc80)), mload(0x3ba0), f_q))mstore(0x4220, mulmod(1, mload(0x3ba0), f_q))mstore(0x4240, addmod(mload(0x41e0), mload(0x4200), f_q))mstore(0x4260, mulmod(sub(f_q, mload(0xcc0)), mload(0x3bc0), f_q))mstore(0x4280, mulmod(1, mload(0x3bc0), f_q))mstore(0x42a0, addmod(mload(0x4240), mload(0x4260), f_q))mstore(0x42c0, mulmod(sub(f_q, mload(0xce0)), mload(0x3be0), f_q))mstore(0x42e0, mulmod(1, mload(0x3be0), f_q))mstore(0x4300, addmod(mload(0x42a0), mload(0x42c0), f_q))mstore(0x4320, mulmod(sub(f_q, mload(0xd20)), mload(0x3c00), f_q))mstore(0x4340, mulmod(1, mload(0x3c00), f_q))mstore(0x4360, addmod(mload(0x4300), mload(0x4320), f_q))mstore(0x4380, mulmod(sub(f_q, mload(0xd60)), mload(0x3c20), f_q))mstore(0x43a0, mulmod(1, mload(0x3c20), f_q))mstore(0x43c0, addmod(mload(0x4360), mload(0x4380), f_q))mstore(0x43e0, mulmod(sub(f_q, mload(0x8a0)), mload(0x3c40), f_q))mstore(0x4400, mulmod(1, mload(0x3c40), f_q))mstore(0x4420, addmod(mload(0x43c0), mload(0x43e0), f_q))mstore(0x4440, mulmod(sub(f_q, mload(0x8c0)), mload(0x3c60), f_q))mstore(0x4460, mulmod(1, mload(0x3c60), f_q))mstore(0x4480, addmod(mload(0x4420), mload(0x4440), f_q))mstore(0x44a0, mulmod(sub(f_q, mload(0x8e0)), mload(0x3c80), f_q))mstore(0x44c0, mulmod(1, mload(0x3c80), f_q))mstore(0x44e0, addmod(mload(0x4480), mload(0x44a0), f_q))mstore(0x4500, mulmod(sub(f_q, mload(0x900)), mload(0x3ca0), f_q))mstore(0x4520, mulmod(1, mload(0x3ca0), f_q))mstore(0x4540, addmod(mload(0x44e0), mload(0x4500), f_q))mstore(0x4560, mulmod(sub(f_q, mload(0x920)), mload(0x3cc0), f_q))mstore(0x4580, mulmod(1, mload(0x3cc0), f_q))mstore(0x45a0, addmod(mload(0x4540), mload(0x4560), f_q))mstore(0x45c0, mulmod(sub(f_q, mload(0x940)), mload(0x3ce0), f_q))mstore(0x45e0, mulmod(1, mload(0x3ce0), f_q))mstore(0x4600, addmod(mload(0x45a0), mload(0x45c0), f_q))mstore(0x4620, mulmod(sub(f_q, mload(0x960)), mload(0x3d00), f_q))mstore(0x4640, mulmod(1, mload(0x3d00), f_q))mstore(0x4660, addmod(mload(0x4600), mload(0x4620), f_q))mstore(0x4680, mulmod(sub(f_q, mload(0x980)), mload(0x3d20), f_q))mstore(0x46a0, mulmod(1, mload(0x3d20), f_q))mstore(0x46c0, addmod(mload(0x4660), mload(0x4680), f_q))mstore(0x46e0, mulmod(sub(f_q, mload(0x9a0)), mload(0x3d40), f_q))mstore(0x4700, mulmod(1, mload(0x3d40), f_q))mstore(0x4720, addmod(mload(0x46c0), mload(0x46e0), f_q))mstore(0x4740, mulmod(sub(f_q, mload(0x9c0)), mload(0x3d60), f_q))mstore(0x4760, mulmod(1, mload(0x3d60), f_q))mstore(0x4780, addmod(mload(0x4720), mload(0x4740), f_q))mstore(0x47a0, mulmod(sub(f_q, mload(0x9e0)), mload(0x3d80), f_q))mstore(0x47c0, mulmod(1, mload(0x3d80), f_q))mstore(0x47e0, addmod(mload(0x4780), mload(0x47a0), f_q))mstore(0x4800, mulmod(sub(f_q, mload(0xa00)), mload(0x3da0), f_q))mstore(0x4820, mulmod(1, mload(0x3da0), f_q))mstore(0x4840, addmod(mload(0x47e0), mload(0x4800), f_q))mstore(0x4860, mulmod(sub(f_q, mload(0xa40)), mload(0x3dc0), f_q))mstore(0x4880, mulmod(1, mload(0x3dc0), f_q))mstore(0x48a0, addmod(mload(0x4840), mload(0x4860), f_q))mstore(0x48c0, mulmod(sub(f_q, mload(0xa60)), mload(0x3de0), f_q))mstore(0x48e0, mulmod(1, mload(0x3de0), f_q))mstore(0x4900, addmod(mload(0x48a0), mload(0x48c0), f_q))mstore(0x4920, mulmod(sub(f_q, mload(0xa80)), mload(0x3e00), f_q))mstore(0x4940, mulmod(1, mload(0x3e00), f_q))mstore(0x4960, addmod(mload(0x4900), mload(0x4920), f_q))mstore(0x4980, mulmod(sub(f_q, mload(0xaa0)), mload(0x3e20), f_q))mstore(0x49a0, mulmod(1, mload(0x3e20), f_q))mstore(0x49c0, addmod(mload(0x4960), mload(0x4980), f_q))mstore(0x49e0, mulmod(sub(f_q, mload(0xac0)), mload(0x3e40), f_q))mstore(0x4a00, mulmod(1, mload(0x3e40), f_q))mstore(0x4a20, addmod(mload(0x49c0), mload(0x49e0), f_q))mstore(0x4a40, mulmod(sub(f_q, mload(0xae0)), mload(0x3e60), f_q))mstore(0x4a60, mulmod(1, mload(0x3e60), f_q))mstore(0x4a80, addmod(mload(0x4a20), mload(0x4a40), f_q))mstore(0x4aa0, mulmod(sub(f_q, mload(0x3a40)), mload(0x3e80), f_q))mstore(0x4ac0, mulmod(1, mload(0x3e80), f_q))mstore(0x4ae0, mulmod(mload(0x39e0), mload(0x3e80), f_q))mstore(0x4b00, mulmod(mload(0x3a00), mload(0x3e80), f_q))mstore(0x4b20, mulmod(mload(0x3a20), mload(0x3e80), f_q))mstore(0x4b40, addmod(mload(0x4a80), mload(0x4aa0), f_q))mstore(0x4b60, mulmod(sub(f_q, mload(0xa20)), mload(0x3ea0), f_q))mstore(0x4b80, mulmod(1, mload(0x3ea0), f_q))mstore(0x4ba0, addmod(mload(0x4b40), mload(0x4b60), f_q))mstore(0x4bc0, mulmod(mload(0x4ba0), 1, f_q))mstore(0x4be0, mulmod(mload(0x3f20), 1, f_q))mstore(0x4c00, mulmod(mload(0x3f80), 1, f_q))mstore(0x4c20, mulmod(mload(0x3fe0), 1, f_q))mstore(0x4c40, mulmod(mload(0x4040), 1, f_q))mstore(0x4c60, mulmod(mload(0x40a0), 1, f_q))mstore(0x4c80, mulmod(mload(0x4100), 1, f_q))mstore(0x4ca0, mulmod(mload(0x4160), 1, f_q))mstore(0x4cc0, mulmod(mload(0x41c0), 1, f_q))mstore(0x4ce0, mulmod(mload(0x4220), 1, f_q))mstore(0x4d00, mulmod(mload(0x4280), 1, f_q))mstore(0x4d20, mulmod(mload(0x42e0), 1, f_q))mstore(0x4d40, mulmod(mload(0x4340), 1, f_q))mstore(0x4d60, mulmod(mload(0x43a0), 1, f_q))mstore(0x4d80, mulmod(mload(0x4400), 1, f_q))mstore(0x4da0, mulmod(mload(0x4460), 1, f_q))mstore(0x4dc0, mulmod(mload(0x44c0), 1, f_q))mstore(0x4de0, mulmod(mload(0x4520), 1, f_q))mstore(0x4e00, mulmod(mload(0x4580), 1, f_q))mstore(0x4e20, mulmod(mload(0x45e0), 1, f_q))mstore(0x4e40, mulmod(mload(0x4640), 1, f_q))mstore(0x4e60, mulmod(mload(0x46a0), 1, f_q))mstore(0x4e80, mulmod(mload(0x4700), 1, f_q))mstore(0x4ea0, mulmod(mload(0x4760), 1, f_q))mstore(0x4ec0, mulmod(mload(0x47c0), 1, f_q))mstore(0x4ee0, mulmod(mload(0x4820), 1, f_q))mstore(0x4f00, mulmod(mload(0x4880), 1, f_q))mstore(0x4f20, mulmod(mload(0x48e0), 1, f_q))mstore(0x4f40, mulmod(mload(0x4940), 1, f_q))mstore(0x4f60, mulmod(mload(0x49a0), 1, f_q))mstore(0x4f80, mulmod(mload(0x4a00), 1, f_q))mstore(0x4fa0, mulmod(mload(0x4a60), 1, f_q))mstore(0x4fc0, mulmod(mload(0x4ac0), 1, f_q))mstore(0x4fe0, mulmod(mload(0x4ae0), 1, f_q))mstore(0x5000, mulmod(mload(0x4b00), 1, f_q))mstore(0x5020, mulmod(mload(0x4b20), 1, f_q))mstore(0x5040, mulmod(mload(0x4b80), 1, f_q))mstore(0x5060, mulmod(sub(f_q, mload(0x880)), 1, f_q))mstore(0x5080, mulmod(sub(f_q, mload(0xc00)), mload(0xda0), f_q))mstore(0x50a0, addmod(mload(0x5060), mload(0x5080), f_q))mstore(0x50c0, mulmod(sub(f_q, mload(0xca0)), mload(0x3ac0), f_q))mstore(0x50e0, addmod(mload(0x50a0), mload(0x50c0), f_q))mstore(0x5100, mulmod(sub(f_q, mload(0xd40)), mload(0x3ae0), f_q))mstore(0x5120, addmod(mload(0x50e0), mload(0x5100), f_q))mstore(0x5140, mulmod(mload(0x5120), mload(0xf00), f_q))mstore(0x5160, mulmod(1, mload(0xf00), f_q))mstore(0x5180, mulmod(mload(0x3f20), mload(0xf00), f_q))mstore(0x51a0, mulmod(mload(0x3f80), mload(0xf00), f_q))mstore(0x51c0, mulmod(mload(0x3fe0), mload(0xf00), f_q))mstore(0x51e0, addmod(mload(0x4bc0), mload(0x5140), f_q))mstore(0x5200, addmod(mload(0x4c00), mload(0x5160), f_q))mstore(0x5220, addmod(mload(0x4c80), mload(0x5180), f_q))mstore(0x5240, addmod(mload(0x4ce0), mload(0x51a0), f_q))mstore(0x5260, addmod(mload(0x4d40), mload(0x51c0), f_q))mstore(0x5280, mulmod(sub(f_q, mload(0xb20)), 1, f_q))mstore(0x52a0, mulmod(sub(f_q, mload(0xb80)), mload(0xda0), f_q))mstore(0x52c0, addmod(mload(0x5280), mload(0x52a0), f_q))mstore(0x52e0, mulmod(sub(f_q, mload(0xbc0)), mload(0x3ac0), f_q))mstore(0x5300, addmod(mload(0x52c0), mload(0x52e0), f_q))mstore(0x5320, mulmod(sub(f_q, mload(0xc60)), mload(0x3ae0), f_q))mstore(0x5340, addmod(mload(0x5300), mload(0x5320), f_q))mstore(0x5360, mulmod(sub(f_q, mload(0xd00)), mload(0x3b00), f_q))mstore(0x5380, addmod(mload(0x5340), mload(0x5360), f_q))mstore(0x53a0, mulmod(mload(0x5380), mload(0x3a60), f_q))mstore(0x53c0, mulmod(1, mload(0x3a60), f_q))mstore(0x53e0, mulmod(mload(0x3f20), mload(0x3a60), f_q))mstore(0x5400, mulmod(mload(0x3f80), mload(0x3a60), f_q))mstore(0x5420, mulmod(mload(0x3fe0), mload(0x3a60), f_q))mstore(0x5440, mulmod(mload(0x4040), mload(0x3a60), f_q))mstore(0x5460, addmod(mload(0x51e0), mload(0x53a0), f_q))mstore(0x5480, addmod(mload(0x4c20), mload(0x53c0), f_q))mstore(0x54a0, addmod(mload(0x4c40), mload(0x53e0), f_q))mstore(0x54c0, addmod(mload(0x4c60), mload(0x5400), f_q))mstore(0x54e0, addmod(mload(0x4cc0), mload(0x5420), f_q))mstore(0x5500, addmod(mload(0x4d20), mload(0x5440), f_q))mstore(0x5520, mulmod(sub(f_q, mload(0xb40)), 1, f_q))mstore(0x5540, mulmod(mload(0x5520), mload(0x3a80), f_q))mstore(0x5560, mulmod(1, mload(0x3a80), f_q))mstore(0x5580, addmod(mload(0x5460), mload(0x5540), f_q))mstore(0x55a0, addmod(mload(0x5480), mload(0x5560), f_q))mstore(0x55c0, mulmod(1, mload(0x7e0), f_q))mstore(0x55e0, mulmod(1, mload(0x55c0), f_q))mstore(0x5600, mulmod(4925592601992654644734291590386747644864797672605745962807370354577123815907, mload(0x7e0), f_q))mstore(0x5620, mulmod(mload(0x5160), mload(0x5600), f_q))mstore(0x5640, mulmod(19380560087801265747114831706136320509424814679569278834391540198888293317501, mload(0x7e0), f_q))mstore(0x5660, mulmod(mload(0x53c0), mload(0x5640), f_q))mstore(0x5680, mulmod(9936069627611189518829255670237324269287146421271524553312532036927871056678, mload(0x7e0), f_q))mstore(0x56a0, mulmod(mload(0x5560), mload(0x5680), f_q))mstore(0x56c0, 0x0000000000000000000000000000000000000000000000000000000000000001)                    mstore(0x56e0, 0x0000000000000000000000000000000000000000000000000000000000000002)mstore(0x5700, mload(0x5580))success := and(eq(staticcall(gas(), 0x7, 0x56c0, 0x60, 0x56c0, 0x40), 1), success)mstore(0x5720, mload(0x56c0))                    mstore(0x5740, mload(0x56e0))mstore(0x5760, mload(0x180))                    mstore(0x5780, mload(0x1a0))success := and(eq(staticcall(gas(), 0x6, 0x5720, 0x80, 0x5720, 0x40), 1), success)mstore(0x57a0, mload(0x1c0))                    mstore(0x57c0, mload(0x1e0))mstore(0x57e0, mload(0x4be0))success := and(eq(staticcall(gas(), 0x7, 0x57a0, 0x60, 0x57a0, 0x40), 1), success)mstore(0x5800, mload(0x5720))                    mstore(0x5820, mload(0x5740))mstore(0x5840, mload(0x57a0))                    mstore(0x5860, mload(0x57c0))success := and(eq(staticcall(gas(), 0x6, 0x5800, 0x80, 0x5800, 0x40), 1), success)mstore(0x5880, mload(0x200))                    mstore(0x58a0, mload(0x220))mstore(0x58c0, mload(0x5200))success := and(eq(staticcall(gas(), 0x7, 0x5880, 0x60, 0x5880, 0x40), 1), success)mstore(0x58e0, mload(0x5800))                    mstore(0x5900, mload(0x5820))mstore(0x5920, mload(0x5880))                    mstore(0x5940, mload(0x58a0))success := and(eq(staticcall(gas(), 0x6, 0x58e0, 0x80, 0x58e0, 0x40), 1), success)mstore(0x5960, mload(0x4e0))                    mstore(0x5980, mload(0x500))mstore(0x59a0, mload(0x55a0))success := and(eq(staticcall(gas(), 0x7, 0x5960, 0x60, 0x5960, 0x40), 1), success)mstore(0x59c0, mload(0x58e0))                    mstore(0x59e0, mload(0x5900))mstore(0x5a00, mload(0x5960))                    mstore(0x5a20, mload(0x5980))success := and(eq(staticcall(gas(), 0x6, 0x59c0, 0x80, 0x59c0, 0x40), 1), success)mstore(0x5a40, mload(0x520))                    mstore(0x5a60, mload(0x540))mstore(0x5a80, mload(0x54a0))success := and(eq(staticcall(gas(), 0x7, 0x5a40, 0x60, 0x5a40, 0x40), 1), success)mstore(0x5aa0, mload(0x59c0))                    mstore(0x5ac0, mload(0x59e0))mstore(0x5ae0, mload(0x5a40))                    mstore(0x5b00, mload(0x5a60))success := and(eq(staticcall(gas(), 0x6, 0x5aa0, 0x80, 0x5aa0, 0x40), 1), success)mstore(0x5b20, mload(0x560))                    mstore(0x5b40, mload(0x580))mstore(0x5b60, mload(0x54c0))success := and(eq(staticcall(gas(), 0x7, 0x5b20, 0x60, 0x5b20, 0x40), 1), success)mstore(0x5b80, mload(0x5aa0))                    mstore(0x5ba0, mload(0x5ac0))mstore(0x5bc0, mload(0x5b20))                    mstore(0x5be0, mload(0x5b40))success := and(eq(staticcall(gas(), 0x6, 0x5b80, 0x80, 0x5b80, 0x40), 1), success)mstore(0x5c00, mload(0x2a0))                    mstore(0x5c20, mload(0x2c0))mstore(0x5c40, mload(0x5220))success := and(eq(staticcall(gas(), 0x7, 0x5c00, 0x60, 0x5c00, 0x40), 1), success)mstore(0x5c60, mload(0x5b80))                    mstore(0x5c80, mload(0x5ba0))mstore(0x5ca0, mload(0x5c00))                    mstore(0x5cc0, mload(0x5c20))success := and(eq(staticcall(gas(), 0x6, 0x5c60, 0x80, 0x5c60, 0x40), 1), success)mstore(0x5ce0, mload(0x2e0))                    mstore(0x5d00, mload(0x300))mstore(0x5d20, mload(0x4ca0))success := and(eq(staticcall(gas(), 0x7, 0x5ce0, 0x60, 0x5ce0, 0x40), 1), success)mstore(0x5d40, mload(0x5c60))                    mstore(0x5d60, mload(0x5c80))mstore(0x5d80, mload(0x5ce0))                    mstore(0x5da0, mload(0x5d00))success := and(eq(staticcall(gas(), 0x6, 0x5d40, 0x80, 0x5d40, 0x40), 1), success)mstore(0x5dc0, mload(0x5a0))                    mstore(0x5de0, mload(0x5c0))mstore(0x5e00, mload(0x54e0))success := and(eq(staticcall(gas(), 0x7, 0x5dc0, 0x60, 0x5dc0, 0x40), 1), success)mstore(0x5e20, mload(0x5d40))                    mstore(0x5e40, mload(0x5d60))mstore(0x5e60, mload(0x5dc0))                    mstore(0x5e80, mload(0x5de0))success := and(eq(staticcall(gas(), 0x6, 0x5e20, 0x80, 0x5e20, 0x40), 1), success)mstore(0x5ea0, mload(0x320))                    mstore(0x5ec0, mload(0x340))mstore(0x5ee0, mload(0x5240))success := and(eq(staticcall(gas(), 0x7, 0x5ea0, 0x60, 0x5ea0, 0x40), 1), success)mstore(0x5f00, mload(0x5e20))                    mstore(0x5f20, mload(0x5e40))mstore(0x5f40, mload(0x5ea0))                    mstore(0x5f60, mload(0x5ec0))success := and(eq(staticcall(gas(), 0x6, 0x5f00, 0x80, 0x5f00, 0x40), 1), success)mstore(0x5f80, mload(0x360))                    mstore(0x5fa0, mload(0x380))mstore(0x5fc0, mload(0x4d00))success := and(eq(staticcall(gas(), 0x7, 0x5f80, 0x60, 0x5f80, 0x40), 1), success)mstore(0x5fe0, mload(0x5f00))                    mstore(0x6000, mload(0x5f20))mstore(0x6020, mload(0x5f80))                    mstore(0x6040, mload(0x5fa0))success := and(eq(staticcall(gas(), 0x6, 0x5fe0, 0x80, 0x5fe0, 0x40), 1), success)mstore(0x6060, mload(0x5e0))                    mstore(0x6080, mload(0x600))mstore(0x60a0, mload(0x5500))success := and(eq(staticcall(gas(), 0x7, 0x6060, 0x60, 0x6060, 0x40), 1), success)mstore(0x60c0, mload(0x5fe0))                    mstore(0x60e0, mload(0x6000))mstore(0x6100, mload(0x6060))                    mstore(0x6120, mload(0x6080))success := and(eq(staticcall(gas(), 0x6, 0x60c0, 0x80, 0x60c0, 0x40), 1), success)mstore(0x6140, mload(0x3a0))                    mstore(0x6160, mload(0x3c0))mstore(0x6180, mload(0x5260))success := and(eq(staticcall(gas(), 0x7, 0x6140, 0x60, 0x6140, 0x40), 1), success)mstore(0x61a0, mload(0x60c0))                    mstore(0x61c0, mload(0x60e0))mstore(0x61e0, mload(0x6140))                    mstore(0x6200, mload(0x6160))success := and(eq(staticcall(gas(), 0x6, 0x61a0, 0x80, 0x61a0, 0x40), 1), success)mstore(0x6220, mload(0x3e0))                    mstore(0x6240, mload(0x400))mstore(0x6260, mload(0x4d60))success := and(eq(staticcall(gas(), 0x7, 0x6220, 0x60, 0x6220, 0x40), 1), success)mstore(0x6280, mload(0x61a0))                    mstore(0x62a0, mload(0x61c0))mstore(0x62c0, mload(0x6220))                    mstore(0x62e0, mload(0x6240))success := and(eq(staticcall(gas(), 0x6, 0x6280, 0x80, 0x6280, 0x40), 1), success)mstore(0x6300, 0x0000000000000000000000000000000000000000000000000000000000000000)                    mstore(0x6320, 0x0000000000000000000000000000000000000000000000000000000000000000)mstore(0x6340, mload(0x4d80))success := and(eq(staticcall(gas(), 0x7, 0x6300, 0x60, 0x6300, 0x40), 1), success)mstore(0x6360, mload(0x6280))                    mstore(0x6380, mload(0x62a0))mstore(0x63a0, mload(0x6300))                    mstore(0x63c0, mload(0x6320))success := and(eq(staticcall(gas(), 0x6, 0x6360, 0x80, 0x6360, 0x40), 1), success)mstore(0x63e0, 0x0f9042466dc09a1e9ca605c59dfe6df60a00d992065756c3ffa8f76affad82fc)                    mstore(0x6400, 0x0cd8d640e96d32277af80bef75e1d4fbc36ec46901a05118bbaeba547fb29b3d)mstore(0x6420, mload(0x4da0))success := and(eq(staticcall(gas(), 0x7, 0x63e0, 0x60, 0x63e0, 0x40), 1), success)mstore(0x6440, mload(0x6360))                    mstore(0x6460, mload(0x6380))mstore(0x6480, mload(0x63e0))                    mstore(0x64a0, mload(0x6400))success := and(eq(staticcall(gas(), 0x6, 0x6440, 0x80, 0x6440, 0x40), 1), success)mstore(0x64c0, 0x066e3a47e91d8cd049d5d84e90ddd6f02ac29119ba3fc861eb82704f93c36609)                    mstore(0x64e0, 0x0b6fc4ccf26ca21ad1aa15a2168e6396a4244c5bcf87b41e834952f37add09fd)mstore(0x6500, mload(0x4dc0))success := and(eq(staticcall(gas(), 0x7, 0x64c0, 0x60, 0x64c0, 0x40), 1), success)mstore(0x6520, mload(0x6440))                    mstore(0x6540, mload(0x6460))mstore(0x6560, mload(0x64c0))                    mstore(0x6580, mload(0x64e0))success := and(eq(staticcall(gas(), 0x6, 0x6520, 0x80, 0x6520, 0x40), 1), success)mstore(0x65a0, 0x1f4864dd91015cc505af24251cf83a6bee7e5c0db2f1c6efb6aa5ea4fedf2953)                    mstore(0x65c0, 0x2947adbf94ca517e8af7eff922713dd59756d19eb5148d6cc13878b632135443)mstore(0x65e0, mload(0x4de0))success := and(eq(staticcall(gas(), 0x7, 0x65a0, 0x60, 0x65a0, 0x40), 1), success)mstore(0x6600, mload(0x6520))                    mstore(0x6620, mload(0x6540))mstore(0x6640, mload(0x65a0))                    mstore(0x6660, mload(0x65c0))success := and(eq(staticcall(gas(), 0x6, 0x6600, 0x80, 0x6600, 0x40), 1), success)mstore(0x6680, 0x21f2d7fd158c3f25324252f53a67a29b7905d49ec0b5e1c5cd79689048e68c09)                    mstore(0x66a0, 0x0bade83b524c941a42857f17db6bce02337b2aceb93c70dca2a2a877771f98e0)mstore(0x66c0, mload(0x4e00))success := and(eq(staticcall(gas(), 0x7, 0x6680, 0x60, 0x6680, 0x40), 1), success)mstore(0x66e0, mload(0x6600))                    mstore(0x6700, mload(0x6620))mstore(0x6720, mload(0x6680))                    mstore(0x6740, mload(0x66a0))success := and(eq(staticcall(gas(), 0x6, 0x66e0, 0x80, 0x66e0, 0x40), 1), success)mstore(0x6760, 0x185c42d3c97f2130b9360fd65fbe294c8410afae9fcbafae136e8132f9ccb164)                    mstore(0x6780, 0x2ac0b49509c8bb9dc197492b0a0943d904965e642f099034bbbe8dd1902d2915)mstore(0x67a0, mload(0x4e20))success := and(eq(staticcall(gas(), 0x7, 0x6760, 0x60, 0x6760, 0x40), 1), success)mstore(0x67c0, mload(0x66e0))                    mstore(0x67e0, mload(0x6700))mstore(0x6800, mload(0x6760))                    mstore(0x6820, mload(0x6780))success := and(eq(staticcall(gas(), 0x6, 0x67c0, 0x80, 0x67c0, 0x40), 1), success)mstore(0x6840, 0x2990f24e0aa77fa96ee4a525f849527c5802815dd7e8e0567da281f29be654ae)                    mstore(0x6860, 0x2d826c82298411998006642efe8d8e1136e485f45fe113da084776f26519442b)mstore(0x6880, mload(0x4e40))success := and(eq(staticcall(gas(), 0x7, 0x6840, 0x60, 0x6840, 0x40), 1), success)mstore(0x68a0, mload(0x67c0))                    mstore(0x68c0, mload(0x67e0))mstore(0x68e0, mload(0x6840))                    mstore(0x6900, mload(0x6860))success := and(eq(staticcall(gas(), 0x6, 0x68a0, 0x80, 0x68a0, 0x40), 1), success)mstore(0x6920, 0x23126b4384928acf64415eee1dfe17f4f49007d748cef01cf8027b8f9d62aa3a)                    mstore(0x6940, 0x04971374248617363ba3921b7d84a4ee94f811fa81821b1c0be9f90d9f7223fd)mstore(0x6960, mload(0x4e60))success := and(eq(staticcall(gas(), 0x7, 0x6920, 0x60, 0x6920, 0x40), 1), success)mstore(0x6980, mload(0x68a0))                    mstore(0x69a0, mload(0x68c0))mstore(0x69c0, mload(0x6920))                    mstore(0x69e0, mload(0x6940))success := and(eq(staticcall(gas(), 0x6, 0x6980, 0x80, 0x6980, 0x40), 1), success)mstore(0x6a00, 0x1bddf4b875c3054dba01e6539f0bec068a10c4cd87113a4f15f80b723ed8de31)                    mstore(0x6a20, 0x274c71b9277af970aac8429e57289393b0c4306c00c61dbdf0ec97bf5d75e087)mstore(0x6a40, mload(0x4e80))success := and(eq(staticcall(gas(), 0x7, 0x6a00, 0x60, 0x6a00, 0x40), 1), success)mstore(0x6a60, mload(0x6980))                    mstore(0x6a80, mload(0x69a0))mstore(0x6aa0, mload(0x6a00))                    mstore(0x6ac0, mload(0x6a20))success := and(eq(staticcall(gas(), 0x6, 0x6a60, 0x80, 0x6a60, 0x40), 1), success)mstore(0x6ae0, 0x031bb67064e063dedfbcd44a45f6183e6e7bbc9cad142ca5b462e72f8079dda0)                    mstore(0x6b00, 0x0b83ef81cb274897721736c46a5a4972d57055b16b8f933f702f4834033c0026)mstore(0x6b20, mload(0x4ea0))success := and(eq(staticcall(gas(), 0x7, 0x6ae0, 0x60, 0x6ae0, 0x40), 1), success)mstore(0x6b40, mload(0x6a60))                    mstore(0x6b60, mload(0x6a80))mstore(0x6b80, mload(0x6ae0))                    mstore(0x6ba0, mload(0x6b00))success := and(eq(staticcall(gas(), 0x6, 0x6b40, 0x80, 0x6b40, 0x40), 1), success)mstore(0x6bc0, 0x0d0297fe61df15529c6abb4a035d75efd601ae891eba2820a7d077f677209df6)                    mstore(0x6be0, 0x067ea832413011d8402ea2e69dcc90e68a3785cd1492fa31145cd68db2f0485d)mstore(0x6c00, mload(0x4ec0))success := and(eq(staticcall(gas(), 0x7, 0x6bc0, 0x60, 0x6bc0, 0x40), 1), success)mstore(0x6c20, mload(0x6b40))                    mstore(0x6c40, mload(0x6b60))mstore(0x6c60, mload(0x6bc0))                    mstore(0x6c80, mload(0x6be0))success := and(eq(staticcall(gas(), 0x6, 0x6c20, 0x80, 0x6c20, 0x40), 1), success)mstore(0x6ca0, 0x0cd91b3101d240ed2606dfca233ce77eb65673747e5b4489ad53b17cd3d3c949)                    mstore(0x6cc0, 0x0e461704f59b5d3f6f36eea31c0ca85f55dd06437557c7d4ef472500364f3e53)mstore(0x6ce0, mload(0x4ee0))success := and(eq(staticcall(gas(), 0x7, 0x6ca0, 0x60, 0x6ca0, 0x40), 1), success)mstore(0x6d00, mload(0x6c20))                    mstore(0x6d20, mload(0x6c40))mstore(0x6d40, mload(0x6ca0))                    mstore(0x6d60, mload(0x6cc0))success := and(eq(staticcall(gas(), 0x6, 0x6d00, 0x80, 0x6d00, 0x40), 1), success)mstore(0x6d80, 0x2305c26030f3fd0f98cd75e3be4faae42a8cae2ef7b40b88d25a5a3df0ef0b19)                    mstore(0x6da0, 0x2e5ad2a7b205f05d988fd8906f72e32e4d56940b1d8342bd6a7e8d7fae3d154f)mstore(0x6dc0, mload(0x4f00))success := and(eq(staticcall(gas(), 0x7, 0x6d80, 0x60, 0x6d80, 0x40), 1), success)mstore(0x6de0, mload(0x6d00))                    mstore(0x6e00, mload(0x6d20))mstore(0x6e20, mload(0x6d80))                    mstore(0x6e40, mload(0x6da0))success := and(eq(staticcall(gas(), 0x6, 0x6de0, 0x80, 0x6de0, 0x40), 1), success)mstore(0x6e60, 0x26d108d6954288e1a489cf7f9976005185ab7172ccebefd03029148ecd601595)                    mstore(0x6e80, 0x1226ad880025f644751e6e9fda9541f7a6a2f4c6bacfbdfdb4c395799045fcf5)mstore(0x6ea0, mload(0x4f20))success := and(eq(staticcall(gas(), 0x7, 0x6e60, 0x60, 0x6e60, 0x40), 1), success)mstore(0x6ec0, mload(0x6de0))                    mstore(0x6ee0, mload(0x6e00))mstore(0x6f00, mload(0x6e60))                    mstore(0x6f20, mload(0x6e80))success := and(eq(staticcall(gas(), 0x6, 0x6ec0, 0x80, 0x6ec0, 0x40), 1), success)mstore(0x6f40, 0x15039130e6b0404eb45ec9d227586b4826b23e8e2a2b605e95637caf96418e24)                    mstore(0x6f60, 0x017bbc08161b85b002b4c894c0e1faf0df67a1a2876565e565e8b600a38a2b73)mstore(0x6f80, mload(0x4f40))success := and(eq(staticcall(gas(), 0x7, 0x6f40, 0x60, 0x6f40, 0x40), 1), success)mstore(0x6fa0, mload(0x6ec0))                    mstore(0x6fc0, mload(0x6ee0))mstore(0x6fe0, mload(0x6f40))                    mstore(0x7000, mload(0x6f60))success := and(eq(staticcall(gas(), 0x6, 0x6fa0, 0x80, 0x6fa0, 0x40), 1), success)mstore(0x7020, 0x0aa88dca3fa55fc263f29c0246208e39afa8a48bb29f8a658e51a61625350bca)                    mstore(0x7040, 0x0ba4618b5d12a7effa6d7ae9242143d7b5adb72cc5de7720042898b968420cc4)mstore(0x7060, mload(0x4f60))success := and(eq(staticcall(gas(), 0x7, 0x7020, 0x60, 0x7020, 0x40), 1), success)mstore(0x7080, mload(0x6fa0))                    mstore(0x70a0, mload(0x6fc0))mstore(0x70c0, mload(0x7020))                    mstore(0x70e0, mload(0x7040))success := and(eq(staticcall(gas(), 0x6, 0x7080, 0x80, 0x7080, 0x40), 1), success)mstore(0x7100, 0x0bd1a1dcc0a1d26782eeb725a64abfe4fe661b254b6c31978dd4ad648c2e9ca0)                    mstore(0x7120, 0x237411941d94c0eb60a738d5ed17d95683333096286fd4c19b8c8cf7f6bcf5bf)mstore(0x7140, mload(0x4f80))success := and(eq(staticcall(gas(), 0x7, 0x7100, 0x60, 0x7100, 0x40), 1), success)mstore(0x7160, mload(0x7080))                    mstore(0x7180, mload(0x70a0))mstore(0x71a0, mload(0x7100))                    mstore(0x71c0, mload(0x7120))success := and(eq(staticcall(gas(), 0x6, 0x7160, 0x80, 0x7160, 0x40), 1), success)mstore(0x71e0, 0x25c102142760232f80da42040491c6c670d0a0271ff5b9dc92f1d13ec514b390)                    mstore(0x7200, 0x18ae2bff827b6ac52cd095c9b7d0f13e9d8716319af35d20fa8e94c06a23ed7c)mstore(0x7220, mload(0x4fa0))success := and(eq(staticcall(gas(), 0x7, 0x71e0, 0x60, 0x71e0, 0x40), 1), success)mstore(0x7240, mload(0x7160))                    mstore(0x7260, mload(0x7180))mstore(0x7280, mload(0x71e0))                    mstore(0x72a0, mload(0x7200))success := and(eq(staticcall(gas(), 0x6, 0x7240, 0x80, 0x7240, 0x40), 1), success)mstore(0x72c0, mload(0x6c0))                    mstore(0x72e0, mload(0x6e0))mstore(0x7300, mload(0x4fc0))success := and(eq(staticcall(gas(), 0x7, 0x72c0, 0x60, 0x72c0, 0x40), 1), success)mstore(0x7320, mload(0x7240))                    mstore(0x7340, mload(0x7260))mstore(0x7360, mload(0x72c0))                    mstore(0x7380, mload(0x72e0))success := and(eq(staticcall(gas(), 0x6, 0x7320, 0x80, 0x7320, 0x40), 1), success)mstore(0x73a0, mload(0x700))                    mstore(0x73c0, mload(0x720))mstore(0x73e0, mload(0x4fe0))success := and(eq(staticcall(gas(), 0x7, 0x73a0, 0x60, 0x73a0, 0x40), 1), success)mstore(0x7400, mload(0x7320))                    mstore(0x7420, mload(0x7340))mstore(0x7440, mload(0x73a0))                    mstore(0x7460, mload(0x73c0))success := and(eq(staticcall(gas(), 0x6, 0x7400, 0x80, 0x7400, 0x40), 1), success)mstore(0x7480, mload(0x740))                    mstore(0x74a0, mload(0x760))mstore(0x74c0, mload(0x5000))success := and(eq(staticcall(gas(), 0x7, 0x7480, 0x60, 0x7480, 0x40), 1), success)mstore(0x74e0, mload(0x7400))                    mstore(0x7500, mload(0x7420))mstore(0x7520, mload(0x7480))                    mstore(0x7540, mload(0x74a0))success := and(eq(staticcall(gas(), 0x6, 0x74e0, 0x80, 0x74e0, 0x40), 1), success)mstore(0x7560, mload(0x780))                    mstore(0x7580, mload(0x7a0))mstore(0x75a0, mload(0x5020))success := and(eq(staticcall(gas(), 0x7, 0x7560, 0x60, 0x7560, 0x40), 1), success)mstore(0x75c0, mload(0x74e0))                    mstore(0x75e0, mload(0x7500))mstore(0x7600, mload(0x7560))                    mstore(0x7620, mload(0x7580))success := and(eq(staticcall(gas(), 0x6, 0x75c0, 0x80, 0x75c0, 0x40), 1), success)mstore(0x7640, mload(0x620))                    mstore(0x7660, mload(0x640))mstore(0x7680, mload(0x5040))success := and(eq(staticcall(gas(), 0x7, 0x7640, 0x60, 0x7640, 0x40), 1), success)mstore(0x76a0, mload(0x75c0))                    mstore(0x76c0, mload(0x75e0))mstore(0x76e0, mload(0x7640))                    mstore(0x7700, mload(0x7660))success := and(eq(staticcall(gas(), 0x6, 0x76a0, 0x80, 0x76a0, 0x40), 1), success)mstore(0x7720, mload(0xde0))                    mstore(0x7740, mload(0xe00))mstore(0x7760, mload(0x55e0))success := and(eq(staticcall(gas(), 0x7, 0x7720, 0x60, 0x7720, 0x40), 1), success)mstore(0x7780, mload(0x76a0))                    mstore(0x77a0, mload(0x76c0))mstore(0x77c0, mload(0x7720))                    mstore(0x77e0, mload(0x7740))success := and(eq(staticcall(gas(), 0x6, 0x7780, 0x80, 0x7780, 0x40), 1), success)mstore(0x7800, mload(0xe20))                    mstore(0x7820, mload(0xe40))mstore(0x7840, mload(0x5620))success := and(eq(staticcall(gas(), 0x7, 0x7800, 0x60, 0x7800, 0x40), 1), success)mstore(0x7860, mload(0x7780))                    mstore(0x7880, mload(0x77a0))mstore(0x78a0, mload(0x7800))                    mstore(0x78c0, mload(0x7820))success := and(eq(staticcall(gas(), 0x6, 0x7860, 0x80, 0x7860, 0x40), 1), success)mstore(0x78e0, mload(0xe60))                    mstore(0x7900, mload(0xe80))mstore(0x7920, mload(0x5660))success := and(eq(staticcall(gas(), 0x7, 0x78e0, 0x60, 0x78e0, 0x40), 1), success)mstore(0x7940, mload(0x7860))                    mstore(0x7960, mload(0x7880))mstore(0x7980, mload(0x78e0))                    mstore(0x79a0, mload(0x7900))success := and(eq(staticcall(gas(), 0x6, 0x7940, 0x80, 0x7940, 0x40), 1), success)mstore(0x79c0, mload(0xea0))                    mstore(0x79e0, mload(0xec0))mstore(0x7a00, mload(0x56a0))success := and(eq(staticcall(gas(), 0x7, 0x79c0, 0x60, 0x79c0, 0x40), 1), success)mstore(0x7a20, mload(0x7940))                    mstore(0x7a40, mload(0x7960))mstore(0x7a60, mload(0x79c0))                    mstore(0x7a80, mload(0x79e0))success := and(eq(staticcall(gas(), 0x6, 0x7a20, 0x80, 0x7a20, 0x40), 1), success)mstore(0x7aa0, mload(0xe20))                    mstore(0x7ac0, mload(0xe40))mstore(0x7ae0, mload(0x5160))success := and(eq(staticcall(gas(), 0x7, 0x7aa0, 0x60, 0x7aa0, 0x40), 1), success)mstore(0x7b00, mload(0xde0))                    mstore(0x7b20, mload(0xe00))mstore(0x7b40, mload(0x7aa0))                    mstore(0x7b60, mload(0x7ac0))success := and(eq(staticcall(gas(), 0x6, 0x7b00, 0x80, 0x7b00, 0x40), 1), success)mstore(0x7b80, mload(0xe60))                    mstore(0x7ba0, mload(0xe80))mstore(0x7bc0, mload(0x53c0))success := and(eq(staticcall(gas(), 0x7, 0x7b80, 0x60, 0x7b80, 0x40), 1), success)mstore(0x7be0, mload(0x7b00))                    mstore(0x7c00, mload(0x7b20))mstore(0x7c20, mload(0x7b80))                    mstore(0x7c40, mload(0x7ba0))success := and(eq(staticcall(gas(), 0x6, 0x7be0, 0x80, 0x7be0, 0x40), 1), success)mstore(0x7c60, mload(0xea0))                    mstore(0x7c80, mload(0xec0))mstore(0x7ca0, mload(0x5560))success := and(eq(staticcall(gas(), 0x7, 0x7c60, 0x60, 0x7c60, 0x40), 1), success)mstore(0x7cc0, mload(0x7be0))                    mstore(0x7ce0, mload(0x7c00))mstore(0x7d00, mload(0x7c60))                    mstore(0x7d20, mload(0x7c80))success := and(eq(staticcall(gas(), 0x6, 0x7cc0, 0x80, 0x7cc0, 0x40), 1), success)mstore(0x7d40, mload(0x7a20))                    mstore(0x7d60, mload(0x7a40))mstore(0x7d80, 0x198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c2)            mstore(0x7da0, 0x1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed)            mstore(0x7dc0, 0x090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b)            mstore(0x7de0, 0x12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa)mstore(0x7e00, mload(0x7cc0))                    mstore(0x7e20, mload(0x7ce0))mstore(0x7e40, 0x186282957db913abd99f91db59fe69922e95040603ef44c0bd7aa3adeef8f5ac)            mstore(0x7e60, 0x17944351223333f260ddc3b4af45191b856689eda9eab5cbcddbbe570ce860d2)            mstore(0x7e80, 0x06d971ff4a7467c3ec596ed6efc674572e32fd6f52b721f97e35b0b3d3546753)            mstore(0x7ea0, 0x06ecdb9f9567f59ed2eee36e1e1d58797fd13cc97fafc2910f5e8a12f202fa9a)success := and(eq(staticcall(gas(), 0x8, 0x7d40, 0x180, 0x7d40, 0x20), 1), success)success := and(eq(mload(0x7d40), 1), success)} return success; } }